using System.Collections.Concurrent;
using System.Xml.Linq;
using GrillpointBot.Core.Common;
using GrillpointBot.Core.Config;
using GrillpointBot.Core.Interfaces;
using GrillpointBot.Core.Models;
using GrillpointBot.Telegram.Services;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace GrillpointBot.Telegram.BotHandlers;

public class DeliveryHandler(ITelegramBotClient bot, IOrderService orders, AppSettings config)
{
    // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    private readonly ConcurrentDictionary<long, Order> _pending = new();

    private string _pickup => Constants.Pickup.ToLower();
    private string _delivery => Constants.Delivery.ToLower();
    
    /// <summary>
    /// –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    /// </summary>
    public async Task StartDeliveryFlowAsync(Order order, CancellationToken ct)
    {
        _pending[order.UserId] = order;

        var markup = new ReplyKeyboardMarkup(
            [
                [ new KeyboardButton("üõç –°–∞–º–æ–≤—ã–≤–æ–∑"), new KeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞") ]
            ])
            { ResizeKeyboard = true };

        await bot.SendMessage(order.UserId,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", replyMarkup: markup, cancellationToken: ct);
    }
    
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.
    /// </summary>
    public async Task<bool> HandleDeliveryMessageAsync(Message message, CancellationToken ct)
    {
        if (!_pending.TryGetValue(message.Chat.Id, out var order))
            return false; // —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏

        var msg = message.Text ?? "";

        // –®–∞–≥ 1: –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞
        if (string.IsNullOrEmpty(order.DeliveryType))
        {
            if (msg.Contains(_pickup, StringComparison.OrdinalIgnoreCase))
            {
                order.DeliveryType = Constants.Pickup;
                await bot.SendMessage(message.Chat.Id,
                    "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû",
                    cancellationToken: ct);
                return true;
            }
            if (msg.Contains(_delivery, StringComparison.OrdinalIgnoreCase))
            {
                order.DeliveryType = Constants.Delivery;
                await bot.SendMessage(message.Chat.Id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè†",
                    cancellationToken: ct);
                return true;
            }

            await bot.SendMessage(message.Chat.Id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: üõç –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ üöö –î–æ—Å—Ç–∞–≤–∫–∞",
                cancellationToken: ct);
            return true;
        }

        // –®–∞–≥ 2: –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –∞–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è
        if (order.DeliveryType == Constants.Delivery)
        {
            if (string.IsNullOrEmpty(order.Address))
            {
                order.Address = msg;
                await bot.SendMessage(message.Chat.Id,
                    "–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:30) ‚è∞",
                    cancellationToken: ct);
                return true;
            }

            if (string.IsNullOrEmpty(order.DeliveryTime))
            {
                order.DeliveryTime = msg;
                await bot.SendMessage(message.Chat.Id,
                    "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû",
                    cancellationToken: ct);
                return true;
            }
        }

        // –®–∞–≥ 3: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if (string.IsNullOrEmpty(order.ContactPhone))
        {
            order.ContactPhone = msg;

            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await FinalizeOrderAsync(order, ct);
            _pending.TryRemove(message.Chat.Id, out _);
            return true;
        }

        return false;
    }

    private async Task FinalizeOrderAsync(Order order, CancellationToken ct)
    {
        await orders.CreateOrderAsync(order);

        await bot.SendMessage(order.UserId,
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É üôå",
            cancellationToken: ct);

        string notify = TelegramNotifier.FormatAdminNotification(order);
        await bot.SendMessage(config.AdminChatId, notify, parseMode: ParseMode.Markdown, cancellationToken: ct);
    }
}